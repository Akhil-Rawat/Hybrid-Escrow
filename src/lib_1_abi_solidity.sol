/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

// SPDX-License-Identifier: MIT-OR-APACHE-2.0
pragma solidity ^0.8.23;

interface ISubscriptionEscrow {
    // Events
    event ProviderRegistered(address indexed provider, string name);
    event PlanCreated(uint256 indexed planId, address indexed provider, uint256 price, uint256 interval);
    event SubscriptionCreated(uint256 indexed subscriptionId, address indexed user, uint256 indexed planId);
    event PaymentProcessed(address indexed from, address indexed to, uint256 amount, uint256 indexed subscriptionId);
    event ProviderEarnings(address indexed provider, uint256 indexed planId, uint256 amount);

    // Functions
    function initialize() external returns (bool);

    function registerProvider(string calldata name) external returns (bool);
    
    function createPlan(uint256 price, uint256 interval, string calldata _metadata_hash) external returns (uint256);
    
    function subscribe(uint256 plan_id) external payable returns (uint256);
    
    function checker() external view returns (bool, bytes memory);

    function processSubscriptionPayment(uint256 subscription_id) external returns (bool);
    
    function getUserBalance(address user) external view returns (uint256);
    
    function getPlans() external view returns (uint256[] memory);

    function withdraw(uint256 amount) external returns (bool);

    function requireRegisteredProvider(address provider) external view;

    // Errors
    error Unauthorized();
    error InvalidInput();
    error InsufficientFunds();
    error NotFound();
}
